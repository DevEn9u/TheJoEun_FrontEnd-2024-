05/17 금
18. css 모듈
*css 지정방식 3가지
- styled components
 ㄴ 패키지를 이용
- tailwind utility
- css 모듈
- scss
- 전통적인 방식

* 컴포넌트가 여러개일 경우 전통적인 방식은 불가능, unique class를 부여해서 사용하는데
 컴포넌트가 내부에서 동적으로 생겨나고 class명이 중복되어 사용될 수 있기 때문 
* styled-component는 컴포넌트를 만들어 스타일을 부여하는 방법인데, 리액트 초기때 사용하던방식,
  스타일 하나를 위해서 컴포넌트를 만들어야 해서 무엇이 나의 필요로 만든 컴포넌트인지, 스타일을 위한
  컴포넌트인지 구분이 힘들어지는 문제점 이 있음 -> 지금 사용안함
* 테일윈드는 패키지 설치로 사용. html에서의 inline-style 부여방식과 동일. 테일윈드만의 축약형 네이밍 사용
  css파일을 따로 만들지 않아도 되고 class명의 명명을 고민하지 않아도 됨.
  css에 익숙하지 않거나 백엔드 출신 개발자들이 사용을 많이 함. 간단한 프로젝트를 이용한 강의에서도 사용
  테일윈드 방식은 각각 스타일을 지정하는 것이기 때문에 공통 스타일 있어야함
  단점: 코드가 지저분해져서 가독성이 너무 떨어짐, 문법(명령어)을 외워야함
* css 모듈: 모듈 css라고도 하고 파일명에 module을 넣음(components/StatusBar.module.css)
  클래스명에 hash값(고유값)을 부여. 다른 파일에 똑같은 클래스명이 있어도 고유 해쉬값이 다르기 때문에
  중복으로 인한 스타일 파괴에 대한 걱정을 하지 않아도 됨
  단점: 파일을 만들어야되고, 파일을 왔다갔다하며 작성해야됨(근데 이건 기존 html 방식에서도 하던거라 괜찮다)

테일윈드를 많이 사용하나(백엔드나 css익숙치 않은 사람들이 많이 쓰기에) 우리는 익숙하기 때문에 css모듈방식을 쓰자.
베스트는 테일윈드와 모듈css를 같이 사용하는 것
--------------------------------------------------------------------
19. react-todo
* components 폴더에서 만드는 컴포넌트는 공통 컴포넌트(header, footer 등), 그 외는 바깥 폴더(src)에 생성
* 배열 요소 추가: [...기존배열, 추가요소]
  배열 요소 삭제: filter
  배열 요소 변경: map

    setTodos(todos.filter((t) => t.id !== todo.id)); 
